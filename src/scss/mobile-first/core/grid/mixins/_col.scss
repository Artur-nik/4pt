@mixin col( $col: 12, 
            $bp: 'default', 
            $value: true,
            $initialization: false,
            $gap: true,
            $lvl: _value($_lvl, 'grid-col')
){
    //* Если в переменной $_lvl, 'grid-col' значение не равно 1 и в миксе значение заданно 1 то увеличиваем лвл до 2
    //* Это требуется чтобы не возникал конфликт при отсутствие placeholder %grid-col-*
    @if $lvl == 1 and _value($_lvl, 'grid-col') != 1 {
        $lvl: 2;
    }  
    @if check($initialization) {
        //* Вывод в 4pt.scss
        @if $_4pt-var-css {
            @include _lvl($lvl, 'default', 'grid-col-initialization', ( 
                --col: #{_value($grid, 'columns', 'setting')},  //* Инициализация col 
                --col-gap: var(--gap),  //* Инициализация col
                --offset:0%, //* Инициализация offset
                width: 100%,
                flex: 1 0 auto,
                margin-left: calc(var(--offset) + (var(--col-gap) / 2)),
                margin-right: calc(var(--col-gap) / 2),
                max-width: calc((100% / (#{_value($grid, 'columns', 'setting')} / var(--col))) - var(--col-gap))  
            ));       
        }
        //* Вывод в 4pt-support.scss
        @else {
            @each $breakpoint in map-keys(map-remove($grid, 'setting')) {
                @include _lvl($lvl, $breakpoint, 'grid-col-initialization', (
                    margin-left: _value($grid, 'gap' , $breakpoint) / 2,
                    margin-right: _value($grid, 'gap' , $breakpoint) / 2,
                    max-width: calc(100% - #{_value($grid, 'gap' , $breakpoint)})                     
                ));    
            }  
        }
    }
    @if check($value) {
        //* Округяем $col, если дробное:
        @if  type-of($col) == number {
            $col:round($col); 
        }

        //* Col
        @if $col == 'col'{ 
            @if $_4pt-var-css {  
                //
                @include _lvl($lvl, $bp, 'grid-col', 
                    (
                        flex-basis: 0,
                        width: auto,
                        --col: #{_value($grid, 'columns', 'default')}, 
                    )); 
            } 
        }
        //* Col-auto
        @else if $col == 'auto'{ 
            @if $_4pt-var-css {  
                //
                @include _lvl($lvl, $bp, 'grid-col-auto', 
                    (
                        flex: 0 0 auto,
                        width: auto, 
                        --col: #{_value($grid, 'columns', 'setting')}  
                    )); 
            } 
        }        
        //* Col-*
        //* Проверка на число и только число:
        @else if type-of($col) == number and unitless($col) {
            //* Сравниваем $col с количество колонок (не может быть больше):
            @if $col <= _value($grid, 'columns', 'setting') and $col >= 1{
                @if $_4pt-var-css {
                    @include _lvl($lvl, $bp, 'grid-col-#{$col}', (--col: #{col($col)}));
                }
                @else {
                    @if $bp == 'default' {
                        @if $gap {
                            @include _lvl($lvl, $bp, 'grid-col-#{$col}', 
                                (max-width: col($col, $bp))
                            ); 
                            @each $breakpoint in map-keys(map-remove($grid, 'default', 'setting')) {
                                @include _lvl($lvl, $breakpoint, 'grid-col-#{$col}', 
                                    (max-width: col($col, $breakpoint))
                                ); 
                            }
                        }
                        @else {
                            @include _lvl($lvl, $bp, 'grid-col-no-gap-#{$col}', 
                                (max-width: col($col, $bp, false))
                            ); 
                        }
                    }
                    @else {
                        @if $gap {
                            @include _lvl($lvl, $bp, 'grid-col-#{$col}', 
                                (max-width: col($col, $bp))
                            ); 
                            @for $i from index(map-keys(map-remove($grid, 'default', 'setting')),$bp) through length(map-keys(map-remove($grid, 'default', 'setting'))){
                                @include _lvl($lvl, nth(map-keys(map-remove($grid, 'default', 'setting')),$i), 'grid-col-#{$col}', 
                                    (max-width: col($col, nth(map-keys(map-remove($grid, 'default', 'setting')),$i)))
                                ); 
                            }
                        }
                        @else {
                            @include _lvl($lvl, $bp, 'grid-col-no-gap-#{$col}', 
                                (max-width:  col($col, $bp, false))
                            ); 
                        }   
                    }
                }
            }
        }
    }
}
//* Ссылка на микс _lvl() (core/mixins/_lvl.scss)
