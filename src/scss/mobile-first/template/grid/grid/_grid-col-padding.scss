.grid-col-padding {
    & > * {
        @if $_4pt-var-css {
            padding-left: calc(var(--col-gap) / 2);
            padding-right: calc(var(--col-gap) / 2);  
        } 
        @else {
            padding-left: _value($grid, 'gap' , 'default') / 2;
            padding-right: _value($grid, 'gap' , 'default') / 2; 
            @each $breakpoint in _value($breakpoints, 'list') {
                @include media($breakpoint) {
                    padding-left: _value($grid, 'gap' ,  $breakpoint) / 2;
                    padding-right: _value($grid, 'gap' , $breakpoint) / 2;
                }
            }         
        }
    }
    @each $bp in _value($breakpoints, 'list') { 
        &-#{$bp} > *{
                @if $_4pt-var-css {
                    @include media($bp) {
                        padding-left: calc(var(--col-gap) / 2);
                        padding-right: calc(var(--col-gap) / 2);   
                    }
                }
                @else {
                    @include media($bp) {
                        padding-left: _value($grid, 'gap' , $bp) / 2;
                        padding-right: _value($grid, 'gap' , $bp) / 2; 
                    }   
                    @if $bp != default and index(map-keys(map-remove($grid, 'default')), $bp) != null {                          
                        @for $i from length(map-remove($grid, 'default')) through index(map-keys(map-remove($grid, 'default')), $bp){
                            @include media(nth(map-keys(map-remove($grid, 'default')), $i)) {
                                padding-left: #{_value($grid, 'gap' , nth(map-keys(map-remove($grid, 'default')),$i)) / 2};
                                padding-right: #{_value($grid, 'gap' , nth(map-keys(map-remove($grid, 'default')),$i)) / 2};   
                            }
                        }
                    }  
                     
                }
            
        }
    }
}